////////////////////////////////////////////////////////////////////////////
//
//  This file is part of RTIMULib
//
//  Copyright (c) 2014-2015, richards-tech, LLC
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of
//  this software and associated documentation files (the "Software"), to deal in
//  the Software without restriction, including without limitation the rights to use,
//  copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
//  Software, and to permit persons to whom the Software is furnished to do so,
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
//  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
//  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
//  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


#include "RTIMULib.h"
#include "RTMotion.h"

#include <termios.h>
#include <unistd.h>
#include <ctype.h>
#include <sys/wait.h>
#include <sys/ioctl.h>

char getUserChar();

static RTIMUSettings *settings;
static RTIMU         *imu;
static RTPressure    *pressure; 
static RTHumidity    *humidity;
static RTMotion      *motion;

int main()
{
    int sampleCount = 0;
    int sampleRate = 0;
    uint64_t rateTimer;
    uint64_t displayTimer;
    uint64_t now;
    bool ismoving = false;
    bool enableCompass = true;
    RTVector3 residuals;
    RTFLOAT heading;
    float heading_avg;
    char input;
    bool mustExit = false;
    
    //  using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.

    settings = new RTIMUSettings("RTIMULib");

    imu      = RTIMU::createIMU(settings);
    if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) {
        printf("No IMU found\n");
        exit(1);
    }

    pressure = RTPressure::createPressure(settings);
    humidity = RTHumidity::createHumidity(settings);
    
    motion = new  RTMotion(settings);
    motion->motionInit();
    
    RTFLOAT staticPressure = 1013.25f;

    //  This is an opportunity to manually override any settings before the call IMUInit

    //  set up IMU

    imu->IMUInit();

    //  this is a convenient place to change fusion parameters

    imu->setSlerpPower(0.02);
    imu->setGyroEnable(true);
    imu->setAccelEnable(true);
    imu->setCompassEnable(true);
    imu->setDebugEnable(false); // turn on if you want to see Fusion information
        
    //  set up pressure sensor

    if (pressure != NULL)
        pressure->pressureInit();

    //  set up humidity sensor

    if (humidity != NULL)
        humidity->humidityInit();
    
    //  set up console io
    struct termios	ctty;
    tcgetattr(fileno(stdout), &ctty);
    ctty.c_lflag &= ~(ICANON);
    tcsetattr(fileno(stdout), TCSANOW, &ctty);

    //  set up for rate timer

    rateTimer = displayTimer = RTMath::currentUSecsSinceEpoch();

    //  now just process data

    while (!mustExit) {
        //  poll at the rate recommended by the IMU

        usleep(imu->IMUGetPollInterval() * 1000);

        while (imu->IMURead()) {
            RTIMU_DATA imuData = imu->getIMUData();

            //  add the pressure data to the structure

            if (pressure != NULL)
                pressure->pressureRead(imuData);

            //  add the humidity data to the structure

            if (humidity != NULL)
                humidity->humidityRead(imuData);

            // Motion detection
            ismoving=motion->detectMotion(imuData.accel, imuData.gyro);
            
            // Residuals of Acceleration minus Gravity
            residuals = imu->getAccelResiduals();

            // Tilt Compensated Heading
            heading     = imuData.fusionPose.toHeading(imuData.compass, settings->m_compassAdjDeclination);
            heading_avg = motion->updateAverageHeading(heading); // smooth it out to approx. 10Hz update rate
            
            // Attempt velocity and position estimation
            motion->updateVelocityPosition(residuals, imuData.fusionQPose, 9.81f, imuData.timestamp, ismoving);
            MOTION_DATA motionData = motion->getMotionData();
                    
            // 
            sampleCount++;

            now = RTMath::currentUSecsSinceEpoch();

            //  display 5 times per second

            if ((now - displayTimer) > 100000) {
                printf("Sample rate %d, Is moving: %d, Heading: %f6.1 Heading Ave: %f6.1\n", sampleRate, ismoving, RTMATH_RAD_TO_DEGREE * heading, RTMATH_RAD_TO_DEGREE * heading_avg);
                printf("%s", RTMath::display("Quaternion", imuData.fusionQPose));
                printf("%s", RTMath::displayDegrees("Pose", imuData.fusionPose));
                printf("%s", RTMath::displayRadians("Accel", imuData.accel));
                printf("%s", RTMath::displayRadians("Gyro ", imuData.gyro));
                printf("%s", RTMath::displayRadians("Mag  ", imuData.compass));
                printf("%s", RTMath::displayRadians("Residuals", residuals));

                if (pressure != NULL) {
                    printf("Pressure: %4.1f, height above sea level: %4.1f, depth below sea level: %4.1f\n",
                           imuData.pressure, RTMath::convertPressureToHeight(imuData.pressure, staticPressure),
                                             RTMath::convertPressureToDepth(imuData.pressure, staticPressure));
                }
                if (humidity != NULL) {
                    printf("Humidity: %4.1f%%\n",
                           imuData.humidity);
                }
                
		printf("IMU Temperature: %4.1f, PS Temperature: %4.1f, HS Temperature: %4f\n", imuData.IMUtemperature, imuData.PStemperature, imuData.temperature);

                printf("Compass is %s\n", enableCompass ? "On" : "Off" );

                if (motion != NULL) {
                    printf("%s", RTMath::displayRadians("World Accel   ", motionData.worldAcceleration));
                    printf("%s", RTMath::displayRadians("World Velocity", motionData.worldVelocity));
                    printf("%s", RTMath::displayRadians("World Position", motionData.worldPosition));
                }
                
                printf(" ------ \n");
                
                fflush(stdout);
                displayTimer = now;
            }

            //  update rate every second

            if ((now - rateTimer) > 1000000) {
                sampleRate = sampleCount;
                sampleCount = 0;
                rateTimer = now;
            }
            
        } // end check for new IMU data
        
        if ((input = getUserChar()) != 0) {
            switch (input) {
                case 'p' :
                    //staticPressure = imuData.pressure;
                    break;
                case 'z' :
                    // zero motion & position
                    motion->motionReset();
                    break;
                case 'm' :
                    // magnetometer OFF
                    enableCompass = false;
                    imu->setCompassEnable(enableCompass);
                    break;
                case 'M' :
                    // magnetometer ON
                    enableCompass = true;
                    imu->setCompassEnable(enableCompass);
                    break;
                case 'x' :
                    // must exit
                    mustExit = true;
                    break;
                } // end switcc input
        } // end if user pressed key

    }
    printf("\nRTIMULibDrive11 exiting\n");
    return 0;
}

char getUserChar()
{
    int i;

    ioctl(0, FIONREAD, &i);
    if (i <= 0)
        return 0;
    // return tolower(getchar());
    return getchar();
}